openapi: 3.0.3
info:
  version: 1.0.0
  title: electronic Library
  description: This is the API for electronic Library of Reinach. - author @michimel
  contact:
    name: eLibrary Reinach
    email: michele.fille@students.fhnw.ch
servers:
  - url: https://eLibraryReinach.ch # fictitious URL
tags:
  - name: Author
    description: Management of Author Information
  - name: Book
    description: Management of Book Information
  - name: Borrowed
    description: Management of Borrowed Information
  - name: Genre
    description: Management of Genre Information
  - name: Member
    description: Management of Member Information



paths:
  /api/author:
    get:
      tags:
        - Author
      summary: Get all Authors
      operationId: getAllAuthors
      responses:
        '200':
          description: OK
  /api/author/newAuthor:
    post:
      tags:
        - Author
      summary: Create new Author
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: OK
  /api/author/updateAuthor/{authorID}:
    put:
      tags:
        - Author
      summary: Update Existing Author
      operationId: updateAuthor
      parameters:
        - name: authorID
          in: path
          description: ID of the author to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        '200':
          description: OK
  /api/author/findByFirstName/{firstName}:
    get:
      tags:
        - Author
      summary: Retrieve Authors by Firstname
      operationId: getAuthorsByFirstName
      parameters:
        - name: firstName
          in: path
          description: First name of the authors to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/author/findByLastName/{lastName}:
    get:
      tags:
        - Author
      summary: Retrieve Authors by Lastname
      operationId: getAuthorsByLastName
      parameters:
        - name: lastName
          in: path
          description: Last name of the authors to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/author/findByFristNameAndLastName/{firstName},{lastName}:
    get:
      tags:
        - Author
      summary: Retrieve the Author by Firstname and Lastname
      operationId: getAuthorByFirstNameAndLastName
      parameters:
        - name: firstName
          in: path
          description: First name of the author to retrieve
          required: true
          schema:
            type: string
        - name: lastName
          in: path
          description: Last name of the author to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/author/findByCountry/{country}:
    get:
      tags:
        - Author
      summary: Retrieve Authors by Country
      operationId: getAuthorsByCountry
      parameters:
        - name: country
          in: path
          description: Country of the authors to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

  /api/book:
    get:
      tags:
        - Book
      summary: Get all Books
      operationId: getAllBooks
      responses:
        '200':
          description: OK
  /api/book/newBook:  
    post:
      tags:
        - Book
      summary: Create new Book
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK
  /api/book/updateBook/{bookID}:
    put:
      tags:
        - Book
      summary: Update Existing Book
      operationId: updateBook
      parameters:
        - name: bookID
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        '200':
          description: OK
  /api/book/findByTitle/{title}:
    get:
      tags:
        - Book
      summary: Retrieve Books by Title
      operationId: getBooksByTitle
      parameters:
        - name: title
          in: path
          description: Title of the books to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/book/findByIsbn/{isbn}:
    get:
      tags:
        - Book
      summary: Retrieve the Book by ISBN
      operationId: getBookByIsbn
      parameters:
        - name: isbn
          in: path
          description: ISBN of the book to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/book/findByPublishYear/{publishYear}:
    get:
      tags:
        - Book
      summary: Retrieve Books by PublishYear
      operationId: getBooksByPublishYear
      parameters:
        - name: publishYear
          in: path
          description: Publish year of the books to retrieve
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
  /api/book/findByAuthor/{author}:
    get:
      tags:
        - Book
      summary: Retrieve Books by Author
      operationId: getBooksByAuthor
      parameters:
        - name: author
          in: path
          description: Author of the books to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/book/findByGenre/{genre}:
    get:
      tags:
        - Book
      summary: Retrieve Books by Genre
      operationId: getBooksByGenre
      parameters:
        - name: genre
          in: path
          description: Genre of the books to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          
  /api/borrowed:
    get:
      tags:
        - Borrowed
      summary: Get all Borrowed
      operationId: getAllBorrowed
      responses:
        '200':
          description: OK
  /api/borrowed/rentBook:
    post:
      tags:
        - Borrowed
      summary: Create new Borrowed, meaning rent a book
      operationId: createBorrowed
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Borrowed'
      responses:
        '200':
          description: OK
  /api/borrowed/returnBook/{borrowedID}:
    put:
      tags:
        - Borrowed
      summary: Update Existing Borrowed, meaning when changed to false, book is returned
      operationId: updateBorrowed
      parameters:
        - name: borrowedID
          in: path
          description: ID of the borrowed item to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/borrowed/findByStatus/{status}:
    get:
      tags:
        - Borrowed
      summary: Retrieve Borrowed by Status
      operationId: getBorrowedByStatus
      parameters:
        - name: status
          in: path
          description: Status of the borrowed items to retrieve
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
  /api/borrowed/findByBook/{book}:
    get:
      tags:
        - Borrowed
      summary: Retrieve Borrowed by Book
      operationId: getBorrowedByBook
      parameters:
        - name: book
          in: path
          description: Book ID or title of the borrowed items to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/borrowed/findByMember/{member}:
    get:
      tags:
        - Borrowed
      summary: Retrieve Borrowed by Member
      operationId: getBorrowedByMember
      parameters:
        - name: member
          in: path
          description: Member ID or name of the borrowed items to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/borrowed/findByMemberAndStatus/{member}/{status}:
    get:
      tags:
        - Borrowed
      summary: Retrieve Borrowed by Member and Status
      operationId: getBorrowedByMemberAndStatus
      parameters:
        - name: member
          in: path
          description: Member ID or name of the borrowed items to retrieve
          required: true
          schema:
            type: string
        - name: status
          in: path
          description: Status of the borrowed items to retrieve
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
  /api/borrowed/findByBookAndStatus/{book}/{status}:
    get:
      tags:
        - Borrowed
      summary: Retrieve Borrowed by Book and Status
      operationId: getBorrowedByBookAndStatus
      parameters:
        - name: book
          in: path
          description: Book ID or title of the borrowed items to retrieve
          required: true
          schema:
            type: string
        - name: status
          in: path
          description: Status of the borrowed items to retrieve
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK

  /api/genre:
    get:
      tags:
        - Genre
      summary: Get all Genres
      operationId: getAllGenres
      responses:
        '200':
          description: OK
  /api/genre/newGenre:  
    post:
      tags:
        - Genre
      summary: Create new Genre
      operationId: createGenre
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Genre'
      responses:
        '200':
          description: OK
  /api/genre/updateGenre/{genre_id}:
    put:
      tags:
        - Genre
      summary: Update Existing Genre
      operationId: updateGenre
      parameters:
        - name: genre_id
          in: path
          description: ID of the genre to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/genre/findByName/{name}:
    get:
      tags:
        - Genre
      summary: Retrieve Genres by Name
      operationId: getGenresByName
      parameters:
        - name: name
          in: path
          description: Name of the genre(s) to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

  /api/member:
    get:
      tags:
        - Member
      summary: Get all Members
      operationId: getAllMembers
      responses:
        '200':
          description: OK
  /api/member/register:
    post:
      tags:
        - Member
      summary: Create new Member
      operationId: createMember
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          description: OK
  /api/member/editProfile/{memberID}:
    put:
      tags:
        - Member
      summary: Update Existing Member
      operationId: updateMember
      parameters:
        - name: memberID
          in: path
          description: ID of the member to update
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /api/member/findByUserName/{userName}:
    get:
      tags:
        - Member
      summary: Retrieve the Member by Username
      operationId: getMemberByUserName
      parameters:
        - name: userName
          in: path
          description: Username of the member to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/member/findByFirstName/{firstName}:
    get:
      tags:
        - Member
      summary: Retrieve Members by Firstname
      operationId: getMembersByFirstName
      parameters:
        - name: firstName
          in: path
          description: Firstname of the members to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/member/findByLastName/{lastName}:
    get:
      tags:
        - Member
      summary: Retrieve Members by Lastname
      operationId: getMembersByLastName
      parameters:
        - name: lastName
          in: path
          description: Lastname of the members to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/member/findByFirstNameAndLastName/{firstName}/{lastName}:
    get:
      tags:
        - Member
      summary: Retrieve the Member by Firstname and Lastname
      operationId: getMemberByFirstNameAndLastName
      parameters:
        - name: firstName
          in: path
          description: Firstname of the member to retrieve
          required: true
          schema:
            type: string
        - name: lastName
          in: path
          description: Lastname of the member to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /api/member/findByEmail/{email}:
    get:
      tags:
        - Member
      summary: Retrieve the Member by Email
      operationId: getMemberByEmail
      parameters:
        - name: email
          in: path
          description: Email of the member to retrieve
          required: true
          schema:
            type: string
            format: email
      responses:
        '200':
          description: OK
  /api/member/findByRole/{role}:
    get:
      tags:
        - Member
      summary: Retrieve Members by Role
      operationId: getMembersByRole
      parameters:
        - name: role
          in: path
          description: Role of the members to retrieve
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

components:
  schemas:
    Author:
      type: object
      properties:
        author_id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        country:
          type: string
      required:
        - firstName
        - lastName
    
    Book:
      type: object
      properties:
        bookId:
          type: integer
          format: int64
        isbn:
          type: string
        title:
          type: string
        publishYear:
          type: integer
          format: int32
        description:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        genre:
          $ref: '#/components/schemas/Genre'
      required:
        - isbn
        - title
        - author

    Borrowed:
      type: object
      properties:
        borrowedId:
          type: integer
          format: int64
        status:
          type: boolean
        book:
          $ref: '#/components/schemas/Book'
        member:
          $ref: '#/components/schemas/Member'
      required:
        - status
        - book
        - member
      
    Genre:
      type: object
      properties:
        genreId:
          type: integer
          format: int64
        name:
          type: string
      required:
        - name
      
    Member:
      type: object
      properties:
        memberId:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        role:
          type: string
      required:
        - username
        - firstName
        - lastName
        - email

  